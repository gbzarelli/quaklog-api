import org.codehaus.groovy.runtime.GStringImpl

buildscript {
    ext.artifactId = 'quaklog-api'
    ext.archive_extension = 'jar'
    ext.archive_file_name = "${artifactId}.${archive_extension}" as GStringImpl

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath 'gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.2'
    }
}

group 'br.com.helpdev'
version '1.1.0'
description = "API para importação e consulta de arquivos de log do jogo Quake"

allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'
    repositories {
        jcenter()
    }
}

subprojects {
    apply plugin: 'java'

    ext {
        versions = [
                junit   : "5.9.3",
                assertj : "3.11.1",
                spring  : "3.1.1",
                swagger : '2.1.0',
                inject  : '2.0.1',
                mockito : '5.4.0',
                lombok  : '1.18.28',
                caffeine: '3.1.6',
                jackson : '2.15.2'
        ]

        libs = [
                inject                      : [
                        "jakarta.inject:jakarta.inject-api:${versions.inject}"
                ],
                spring_test                 : [
                        "org.springframework.boot:spring-boot-starter-test:${versions.spring}",
                ],
                unit_test                   : [
                        "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
                        "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
                        "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
                        "org.mockito:mockito-core:${versions.mockito}"

                ],
                spring_config               : [
                        "org.springframework.boot:spring-boot-starter-web:${versions.spring}",
                        "io.springfox:springfox-swagger2:${versions.swagger}",
                ],
                cacheable                   : [
                        "org.springframework.boot:spring-boot-starter-cache:${versions.spring}",
                        "com.github.ben-manes.caffeine:caffeine:${versions.caffeine}",
                        "com.github.ben-manes.caffeine:guava:${versions.caffeine}",
                        "com.github.ben-manes.caffeine:jcache:${versions.caffeine}",
                ],
                spring_annotation_processor : [
                        "org.springframework.boot:spring-boot-configuration-processor:${versions.spring}",
                ],
                communs_libs                : [
                        "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}",
                        "org.projectlombok:lombok:${versions.lombok}"
                ],
                communs_annotation_processor: [
                        "org.projectlombok:lombok:${versions.lombok}"
                ],
                entrypoint                  : [
                        "org.springframework.boot:spring-boot-starter-web:${versions.spring}",
                        "org.springdoc:springdoc-openapi-starter-webmvc-ui:${versions.swagger}",
                ],
                database                    : [
                        "org.springframework.boot:spring-boot-starter-data-mongodb:${versions.spring}",
                ],
        ]
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
    }
}

tasks.register('jacocoRootReport', JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.required = true // human readable
        xml.required = true // required by coveralls
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}